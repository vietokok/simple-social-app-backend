version: '3.4'

services:
  app:
    image: social-app/backend:v1
    volumes:
      - ./:/app
    environment:
      - FACEBOOK_KEY=${FACEBOOK_KEY}
      - FACEBOOK_SECRET={FACEBOOK_SECRET}
      - FACEBOOK_CALLBACK_URL=${FACEBOOK_CALLBACK_URL}
      - GOOGLE_KEY=${GOOGLE_KEY}
      - GOOGLE_SECRET=${GOOGLE_SECRET}
      - GOOGLE_CALLBACK_URL=${GOOGLE_CALLBACK_URL}
      - MONGO_URI=${MONGO_URI}
      - COOKIE_KEY=${COOKIE_KEY}
      - PORT=${PORT}
      - ACCESS_TOKEN_SERCRET_KEY=${ACCESS_TOKEN_SERCRET_KEY}
      - CLIENT_HOME_PAGE_URL=${CLIENT_HOME_PAGE_URL}
      - AWS_SECRET_KEY=${AWS_SECRET_KEY}
      - AWS_ACCESS_KEY=${AWS_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}

    ports:
      - '${PORT}:${PORT}'
    restart: unless-stopped
    depends_on:
      - redis
      - db
    networks:
      - db-network
      - redis-network
    healthcheck:
      test: wget --quiet --tries=1 --spider http://localhost:${PORT} || exit 1z
      interval: 30s
      timeout: 10s
      retries: 5
  db:
    image: mongo
    volumes:
      - .docker/data/db:/data/db
      - .docker/db-entrypoint.sh:/docker-entrypoint-initdb.d/db-entrypoint.sh
    restart: unless-stopped
    networks:
      - db-network
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${DB_ROOT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${DB_ROOT_PASS}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo db:27017/speech-api --quiet
      interval: 30s
      timeout: 10s
      retries: 5
    user: '1000:1000'

  redis:
    image: redis:5-alpine
    volumes:
      - .docker/data/redis:/data
    command: redis-server --requirepass ${REDIS_PASSWORD}
    restart: unless-stopped
    networks:
      - redis-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 5
    user: '1000:1000'

networks:
  db-network:
    driver: bridge
  redis-network:
    driver: bridge
